import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:kafecraft_exam/model/exploitation.dart';
import 'package:kafecraft_exam/model/field.dart';
import 'package:kafecraft_exam/provider/player_provider.dart';

final exploitationProvider =
    StateNotifierProvider<ExploitationProvider, Exploitation?>(
  (ref) => ExploitationProvider(ref),
);

class ExploitationProvider extends StateNotifier<Exploitation?> {
  final Ref ref;

  ExploitationProvider(this.ref) : super(null);

  Future<void> initialize() async {
    final player = ref.read(playerNotifier);
    if (player?.id != null) await loadOrCreateExploitation(player!.id!);
  }

  Future<void> loadOrCreateExploitation(String playerId) async {
    try {
      final snapshot = await FirebaseFirestore.instance
          .collection("exploitations")
          .where("playerId", isEqualTo: playerId)
          .limit(1)
          .get();

      if (snapshot.docs.isNotEmpty) {
        state = Exploitation.fromMap(snapshot.docs.first.data())
            .copyWith(id: snapshot.docs.first.id);
      } else {
        await createExploitation(playerId);
      }
    } catch (e) {
      print(e);
    }
  }

  Future<void> createExploitation(String playerId) async {
    final firestore = FirebaseFirestore.instance;

    try {
      Exploitation exploitation = Exploitation(
        playerId: playerId,
        fields: [],
      );

      final docRef =
          await firestore.collection("exploitations").add(exploitation.toMap());

      state = exploitation.copyWith(id: docRef.id);
    } catch (e) {
      print(e);
    }
  }

  Future<bool> addField(String fieldName) async {
    final firestore = FirebaseFirestore.instance;
    final player = ref.read(playerNotifier);

    if (player == null || state == null) return false;

    try {
      if (state!.fields.length >= 4) {
        var res =
            await ref.read(playerNotifier.notifier).addOrRemoveDeeVee(15, true);
        if (!res) {
          return false;
        }
      }

      Field newField = Field.empty(fieldName);

      List<Field> updatedFields = [...state!.fields, newField];

      await firestore.collection("exploitations").doc(state!.id).update({
        'fields': updatedFields.map((field) => field.toMap()).toList(),
      });

      state = state!.copyWith(fields: updatedFields);
      return true;
    } catch (e) {
      print(e);
      return false;
    }
  }

  Future<void> updateField(Field updatedField) async {
    final firestore = FirebaseFirestore.instance;

    try {
      List<Field> updatedFields = List.from(state!.fields);
      int fieldIndex =
          updatedFields.indexWhere((field) => field.name == updatedField.name);

      if (fieldIndex != -1) {
        updatedFields[fieldIndex] = updatedField;
        await firestore.collection("exploitations").doc(state!.id).update({
          'fields': updatedFields.map((field) => field.toMap()).toList(),
        });
        state = state!.copyWith(fields: updatedFields);
      }
    } catch (e) {
      print(e);
    }
  }
}
